generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum USER_STATUS {
  ACTIVE  @map("active")
  BANNED  @map("banned")
  PENDING @map("pending")
}

model User {
  id            String         @id @default(uuid())
  email         String?        @unique
  avatarUrl     String?        @map("avatar_url")
  name          String?
  password      String?        @db.VarChar(255)
  userStatus    USER_STATUS    @default(PENDING) @map("user_status")
  isDeleted     Boolean        @default(false) @map("is_deleted")
  oAuthAccounts OAuthAccount[]
  role          Role           @relation(fields: [roleId], references: [id])
  rooms         Room[]
  roleId        String         @map("role_id")
  roomUsers     RoomUser[]
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  @@index([email])
  @@map("users")
}

enum OAUTH_PROVIDER {
  GITHUB @map("github")
}

model OAuthAccount {
  id          String         @id @default(uuid())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String         @unique @map("user_id")
  provider    OAUTH_PROVIDER
  providerId  String         @map("provider_id")
  accessToken String         @map("access_token")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([provider, providerId])
  @@map("oauth_accounts")
}

model Role {
  id                String           @id @default(uuid())
  name              String           @unique @db.VarChar(15)
  description       String?          @db.VarChar(255)
  isSystemGenerated Boolean          @default(false) @map("is_system_generated")
  users             User[]
  permissions       RolePermission[]
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")

  @@index([name])
  @@map("roles")
}

enum PERMISSION_RESOURCE {
  USER             @map("user")
  ROLE             @map("role")
  USER_ROLES       @map("user_roles")
  PERMISSION       @map("permission")
  ROLE_PERMISSIONS @map("role_permissions")
  ROOM             @map("room")
}

enum PERMISSION_ACTION {
  READ            @map("read")
  WRITE           @map("write")
  UPDATE          @map("update")
  DELETE          @map("delete")
  MANAGE          @map("manage")
  CHANGE_PASSWORD @map("change_password")
  UPDATE_PROFILE  @map("update_profile")
}

model Permission {
  id                String              @id @default(uuid())
  name              String              @unique @db.VarChar(40)
  description       String?             @db.VarChar(255)
  roles             RolePermission[]
  resource          PERMISSION_RESOURCE
  action            PERMISSION_ACTION
  requiresOwnership Boolean             @default(false) @map("requires_ownership")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")

  @@unique([resource, action])
  @@index([name])
  @@index([resource])
  @@map("permissions")
}

enum PERMISSION_TYPE {
  ALLOW    @map("allow")
  DENY     @map("deny")
  RESTRICT @map("restrict")
}

model RolePermission {
  role           Role            @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId         String          @map("role_id")
  permission     Permission      @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId   String          @map("permission_id")
  permissionType PERMISSION_TYPE @default(ALLOW) @map("permission_type")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model Room {
  id               String           @id @default(uuid())
  title            String?          @db.VarChar(150)
  owner            User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId          String           @map("owner_id")
  commitSummaries  CommitSummary[]
  roomRepositories RoomRepository[]
  roomUsers        RoomUser[]
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  @@index([ownerId])
  @@map("rooms")
}

enum ROOM_ROLE {
  OWNER @map("owner")
}

model RoomUser {
  room      Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    String    @map("room_id")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @map("user_id")
  role      ROOM_ROLE
  createdAt DateTime  @default(now()) @map("created_at")

  @@id([roomId, userId])
  @@map("room_users")
}

model Repository {
  id                 String           @id @db.VarChar(100)
  repositoryFullname String           @map("repository_fullname") @db.VarChar(255)
  roomRepositories   RoomRepository[]

  @@map("repositories")
}

model RoomRepository {
  room         Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId       String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: NoAction)
  repositoryId String     @db.VarChar(100)

  @@id([roomId, repositoryId])
  @@map("room_repositories")
}

model CommitSummary {
  id                 String       @id @default(uuid())
  summary            String       @db.Text
  writerUsername     String       @map("writer_username") @db.VarChar(150)
  commitHashes       CommitHash[]
  repositoryId       String       @map("repository_id") // redundant
  repositoryFullname String       @map("repository_fullname") // redundant
  room               Room         @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId             String       @map("room_id")
  createdAt          DateTime     @default(now()) @map("created_at")

  @@index([repositoryId])
  @@index([roomId])
  @@map("commit_summaries")
}

model CommitHash {
  id              String        @id @default(uuid())
  hash            String        @db.VarChar(64)
  commitSummary   CommitSummary @relation(fields: [commitSummaryId], references: [id], onDelete: Cascade)
  commitSummaryId String        @map("commit_summary_id")
  createdAt       DateTime      @default(now()) @map("created_at")

  @@index([hash])
  @@index([commitSummaryId])
  @@map("commit_hashes")
}
