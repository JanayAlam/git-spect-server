generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum USER_STATUS {
  ACTIVE
  BANNED
  PENDING
}

model User {
  id            String         @id @default(uuid())
  email         String?        @unique
  avatarUrl     String?        @map("avatar_url")
  name          String?
  password      String?        @db.VarChar(255)
  userStatus    USER_STATUS    @default(PENDING) @map("user_status")
  isDeleted     Boolean        @default(false) @map("is_deleted")
  oAuthAccounts OAuthAccount[]
  role          Role           @relation(fields: [roleId], references: [id])
  roleId        String         @map("role_id")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  @@index([email])
  @@map("users")
}

enum OAUTH_PROVIDER {
  GITHUB
}

model OAuthAccount {
  id          String         @id @default(uuid())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String         @unique @map("user_id")
  provider    OAUTH_PROVIDER
  providerId  String         @map("provider_id")
  accessToken String         @map("access_token")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([provider, providerId])
  @@map("oauth_accounts")
}

model Role {
  id                String           @id @default(uuid())
  name              String           @unique @db.VarChar(15)
  description       String?          @db.VarChar(255)
  isSystemGenerated Boolean          @default(false) @map("is_system_generated")
  users             User[]
  permissions       RolePermission[]
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")

  @@index([name])
  @@map("roles")
}

enum PERMISSION_RESOURCE {
  USER
  ROLE
  USER_ROLES
  PERMISSION
  ROLE_PERMISSIONS
}

enum PERMISSION_ACTION {
  READ
  WRITE
  UPDATE
  DELETE
  MANAGE
  CHANGE_PASSWORD
  UPDATE_PROFILE
}

model Permission {
  id                String              @id @default(uuid())
  name              String              @unique @db.VarChar(40)
  description       String?             @db.VarChar(255)
  roles             RolePermission[]
  resource          PERMISSION_RESOURCE
  action            PERMISSION_ACTION
  requiresOwnership Boolean             @default(false) @map("requires_ownership")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")

  @@unique([resource, action])
  @@index([name])
  @@index([resource])
  @@map("permissions")
}

enum PERMISSION_TYPE {
  ALLOW
  DENY
  RESTRICT
}

model RolePermission {
  role           Role            @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId         String          @map("role_id")
  permission     Permission      @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId   String          @map("permission_id")
  permissionType PERMISSION_TYPE @default(ALLOW) @map("permission_type")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")

  @@id([roleId, permissionId])
  @@map("role_permissions")
}
